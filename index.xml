<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tips</title>
    <link>https://jiadingyi.github.io/Tips/</link>
    <description>Recent content on Tips</description>
    <image>
      <url>https://jiadingyi.github.io/Tips/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jiadingyi.github.io/Tips/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jiadingyi.github.io/Tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift利用类名动态创建实例对象</title>
      <link>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E7%B1%BB%E5%90%8D%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E7%B1%BB%E5%90%8D%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</guid>
      <description>Swift 利用类名动态创建实例对象  OC 通过字符串创建实例对象 Swift 中通过字符串创建实例对象    Swift 利用类名动态创建实例对象 OC 通过字符串创建实例对象 在OC中我们可以通过下列方法轻松创建实例对象
NSString *className = @&amp;#34;UIView&amp;#34;; Class class = NSClassFromString(className); UIView *view = [[class alloc] init]; Swift 中通过字符串创建实例对象   获取命名空间
func currentNameSpace() -&amp;gt; String? { guard let spaceName = Bundle.main.infoDictionary![&amp;#34;CFBundleExecutable&amp;#34;] as? String else { print(&amp;#34;获取命名空间失败&amp;#34;) return nil } return spaceName }   获取类名并创建实例对象
func registerAdapters&amp;lt;T&amp;gt;() -&amp;gt; [T]? where T: Adapter { guard let spaceName = currentNameSpace() else { return nil } var adapters: [T] = [] for adapter in adaptersName { let fullName = spaceName + &amp;#34;.</description>
    </item>
    
    <item>
      <title>Swift利用协议实现前缀功能</title>
      <link>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E5%8A%9F%E8%83%BD/</guid>
      <description>Swift利用协议实现前缀功能  想要实现的功能 存在的问题 解决方案  属性前增加前缀（不优雅） 点语法增加前缀  一、持有属性方式 二、使用范型  给String扩充类型方法   三、利用协议实现前缀        Swift利用协议实现前缀功能 想要实现的功能 计算字符串中数字的个数
var greeting = &amp;#34;1234-Hello, playground-1234&amp;#34; extension String { var numberCount: Int { var number = 0 for c in self where (&amp;#34;0&amp;#34;...&amp;#34;9&amp;#34;).contains(c){ number += 1 } return number } } print(greeting.numberCount) 存在的问题 直接给一个类增加扩展，容易导致冲突。
解决方案 属性前增加前缀（不优雅） var greeting = &amp;#34;1234-Hello, playground-1234&amp;#34; extension String { var zy_numberCount: Int { var number = 0 for c in self where (&amp;#34;0&amp;#34;.</description>
    </item>
    
    <item>
      <title>Swift中的属性</title>
      <link>https://jiadingyi.github.io/Tips/post/swift%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/swift%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</guid>
      <description>Swift 中的属性  实例属性  存储属性 计算属性 Example 枚举 rawValue 原理 延迟存储属性（Lazy Stored Property） 属性观察器（Property Observe） 全局变量，局部变量 inout 的再次研究   类型属性 （Type Property）  类型属性细节 单例模式   协议中的属性    Swift 中的属性 实例属性 存储属性  类似成员变量的概念 存储在实例的内存中 结构体、类可以定义存储属性 ✅ 枚举不可以定义存储属性 ❎ 在创建类或结构体实例的时候，必须为所有实例属性设置一个合适的初始值  可以在初始化器里为存储属性设置一个初始值 可以分配一个默认的属性值作为属性定义的一部分    计算属性  本质就是方法（函数） 不占用实例的内存 枚举、结构体、类都可以定义计算属性 set 传入的新值默认叫做 newValue，也可以自定义   struct Circle { var radius: Double var diameter: Double { set (newDiameter) { radius = newDiameter / 2 } get { radius * 2 } } }    定义计算属性只能用 var，不能用 let  let 代表常量，值是一成不变的 计算属性的值是可能发生变化的（即使是只读计算属性）  上述例子中的 radius 改变会导致 diameter 变化     只读计算属性：只有 get，没有 set   struct Circle { var radius: Double var diameter: Double { radius * 2 } }     Example struct Circle { // 存储属性 var radius: Double // 计算属性 var diameter: Double { set { radius = newValue / 2 } get { radius * 2 } } } var circle = Circle(radius: 5) print(circle.</description>
    </item>
    
  </channel>
</rss>
