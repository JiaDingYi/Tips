<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tips</title>
    <link>https://jiadingyi.github.io/Tips/</link>
    <description>Recent content on Tips</description>
    <image>
      <title>Tips</title>
      <url>https://jiadingyi.github.io/Tips/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jiadingyi.github.io/Tips/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 10 Oct 2023 15:15:21 +0800</lastBuildDate><atom:link href="https://jiadingyi.github.io/Tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>写给iOSer的实践指南 如何快速上手Android项目</title>
      <link>https://jiadingyi.github.io/Tips/post/%E5%86%99%E7%BB%99ioser%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bandroid%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 10 Oct 2023 15:15:21 +0800</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/%E5%86%99%E7%BB%99ioser%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bandroid%E9%A1%B9%E7%9B%AE/</guid>
      <description>理解Gradle的各种配置文件 setting.gradle文件 项目根build.gradle文件 模块的build.gradle文件 Plugin Android Android四大组件 activity service content provider broadcast receiver Intent 资源管理 资源目录结构： 配置限定符： 资源访问： 理解Gradle的各种配置文件 当Android studio创建新项目时，默认会生成三个Gradle文件。
其中两个，setting.gradle和build.gradle在项目根目录中。另一个build.gradle在应用程序模块中。
如下所示
MyApp | - build.gradle | - setting.gradle | - app 这三个文件每一个都有其独有的用处。
setting.gradle文件 setting文件在Build初始化阶段执行，定义了哪些模块应改被包含在构建中。
单个模块项目不一定需要setting文件，但是多模块项目必须要包含setting文件；否则，Gradle不知道要将哪些模块包含到构建中。
include &#39;:app&#39;
如上所示：app模块被包含其中。
项目根build.gradle文件 在项目根目录的build.gradle文件中，你可以配置需要应用于项目中所有模块的选项。它默认包含两个代码块：
buildscript { repositories { jcenter() } dependencies { classpath &amp;#39;com.android.tools.build:gradle:1.2.3&amp;#39; } } allprojects { repositories { jcenter() } } buildscript代码块是配置实际构建的位置。
在**repositories{&amp;hellip;}**代码块中，可以看到我们在 repositories{} 中将JCenter配置为依赖库。
依赖库意味着依赖的来源，或者换句话说，一个可下载的第三方库列表，我们可以在我们的应用和库中使用。
JCenter是一个Gradle预先内置的Maven存储库，Gradle默认已经配置好相关了，不需要你额外的设置 。
Gradle中还有几个内置的存储库，并且Gradle也支持添加自己的本地或远程仓库。</description>
    </item>
    
    <item>
      <title>我的第一个Clang插件</title>
      <link>https://jiadingyi.github.io/Tips/post/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAclang%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 30 May 2023 11:00:37 +0800</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAclang%E6%8F%92%E4%BB%B6/</guid>
      <description>概念 编译的主要流程 输入文件 预处理 编译阶段 后端 链接 绑定 如何利用Clang提升开发质量 Clang提供了什么能力？ libClang Clang Plugins LibTooling 我的第一个Clang插件 编译 llvm-project 编写clang plugin的准备工作 编写clang plugin Xcode集成Clang插件 指定clang 关闭 Enable Index-While-Building Functionality 指定需要额外加载的clang plugin 编译结果 我的第一个LibTooling 使用ninja编译llvm项目 创建libtooling 使用LibTooling 概念 LLVM Low Level Virtual Machine，由 Chris Lattner（Swift 作者） 用于 Objective-C 和 Swift 的编译，后来又加上了很多功能可用于常规编译器、JIT 编译器、调试器、静态分析工具等。总结来说，LLVM 是工具链技术与一个模块化和可重用的编译器的集合。 Clang 是 LLVM 的子项目，可以对 C、C++和 Objective-C 进行快速编译，编译速度比 GCC 快 3 倍。Clang 可以认为是 Objective-C 的编译前端，LLVM 是编译后端，前端调用后端接口完成任务。Swift 则有自己的编译前端 SIL optimizer，编译后端同样用的是 LLVM。 AST 抽象语法树，按照层级关系排列。 IR 中间语言，具有与语言无关的特性，整体结构为 Module(一个文件)&amp;ndash;Function&amp;ndash;Basic Block–Instruction(指令)。 编译器 编译器用于把代码编译成机器码，机器码可以直接在 CPU 上面运行。好处是运行效率高，坏处是调试周期长，需要重新编译一次（OC 改完代码需要重新运行）。 解释器 解释器会在运行时解释执行代码，会一段一段的把代码翻译成目标代码，然后执行目标代码。好处是具有动态性，调试及时（类似 Flutter、Playground），坏处是执行效率低。平时在调试代码的时候，使用解释器会提高效率。 编译的主要流程 通过命令行查看源码的编译流程</description>
    </item>
    
    <item>
      <title>玩转StableDiffusion</title>
      <link>https://jiadingyi.github.io/Tips/post/%E7%8E%A9%E8%BD%ACstablediffusion/</link>
      <pubDate>Tue, 30 May 2023 10:30:43 +0800</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/%E7%8E%A9%E8%BD%ACstablediffusion/</guid>
      <description>玩转 Stable diffusion（落地实操版） 什么是 Midjourney、Stable Diffusion 为什么选择 Stable Diffusion？ 开发环节，先在iOS上跑起来（简述） Core ML Stable Diffusion 下载模型 模型解压缩 生成 StableDiffusionPipeline 文生图 证书设置 最终效果 在各种设备上把 Stable Diffusion 玩起来 iOS MacOS Draw Things App Stable Diffusion WebUI SD Web UI 环境搭建 （略） Windows PC 云服务器 傻瓜式部署流程 不同方案的优势和限制 iPhone、iPad Mac OS 使用 Draw Things App： 使用 Stable Diffusion Web UI Windows PC 使用 Stable Diffusion Web UI 云服务器 使用 Stable Diffusion Web UI 手把手教你生成一张专业摄影图 手把手教你给模特换装 ControlNet的其他妙用 玩转 Stable diffusion（落地实操版） 什么是 Midjourney、Stable Diffusion 举个例子：</description>
    </item>
    
    <item>
      <title>VSCode中使用正则查找替换</title>
      <link>https://jiadingyi.github.io/Tips/post/vscode%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Thu, 02 Feb 2023 18:59:17 +0800</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/vscode%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2/</guid>
      <description>在VSCode中打开正则 引入问题 想要查找所有以双引号 “” 导入的头文件 #import “People.h” 将所有双引号导入的头文件替换为尖括号 #import &amp;lt;People/People.h&amp;gt; 解决问题 查找所有以 #import &amp;quot; 开头, .h&amp;quot; 结尾的字符串 替换为以 #import &amp;lt;ACKShareKit/ 开头，&amp;gt; 结尾的字符串 捕获组为（.*.h） 参考链接</description>
    </item>
    
    <item>
      <title>使用Property Wrapper创建Weak Array</title>
      <link>https://jiadingyi.github.io/Tips/post/%E4%BD%BF%E7%94%A8property-wrapper%E5%88%9B%E5%BB%BAweak-array/</link>
      <pubDate>Mon, 07 Nov 2022 16:40:44 +0800</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/%E4%BD%BF%E7%94%A8property-wrapper%E5%88%9B%E5%BB%BAweak-array/</guid>
      <description>Property Wrapper是什么 使用Property Wrapper创建Weak Array Property Wrapper是什么 属性包装器是Swift 5的一项强大功能。 为了更好的了解属性包装器，让我们举一个例子来看一下它们能解决哪些问题。 假如我们想要添加一个日志记录功能，每次属性更改时，我们都会将其新值打印到Xcode控制台。 这样追踪错误或追踪数据流时非常有用。 实现此目的的直接方法是覆盖setter：
struct Bar { private var _x = 0 var x: Int { get { _x } set { _x = newValue print(&amp;#34;New value is \(newValue)&amp;#34;) } } var bar = Bar() bar.x = 1 /// print &amp;#39;New value is 1&amp;#39; } 如果我们继续记录更多的这样的属性，那么代码很快就会变得一团糟。 为了不用每个新属性一遍又一遍的复制相同代码，我们声明一个新类型，该新类型将执行日志记录：
struct ConsoleLogged&amp;lt;Value&amp;gt; { private var value: Value init(wrappedValue: Value) { self.value = wrappedValue } var wrappedValue: Value { get { value } set { value = newValue print(&amp;#34;New value is \(newValue)&amp;#34;) } } } 这是我们如何使用ConsoleLogged重写Bar的方法：</description>
    </item>
    
    <item>
      <title>Swift利用类名动态创建实例对象</title>
      <link>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E7%B1%BB%E5%90%8D%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E7%B1%BB%E5%90%8D%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</guid>
      <description>Swift 利用类名动态创建实例对象 OC 通过字符串创建实例对象 Swift 中通过字符串创建实例对象 Swift 利用类名动态创建实例对象 OC 通过字符串创建实例对象 在OC中我们可以通过下列方法轻松创建实例对象
NSString *className = @&amp;#34;UIView&amp;#34;; Class class = NSClassFromString(className); UIView *view = [[class alloc] init]; Swift 中通过字符串创建实例对象 获取命名空间
func currentNameSpace() -&amp;gt; String? { guard let spaceName = Bundle.main.infoDictionary![&amp;#34;CFBundleExecutable&amp;#34;] as? String else { print(&amp;#34;获取命名空间失败&amp;#34;) return nil } return spaceName } 获取类名并创建实例对象
func registerAdapters&amp;lt;T&amp;gt;() -&amp;gt; [T]? where T: Adapter { guard let spaceName = currentNameSpace() else { return nil } var adapters: [T] = [] for adapter in adaptersName { let fullName = spaceName + &amp;#34;.</description>
    </item>
    
    <item>
      <title>Swift利用协议实现前缀功能</title>
      <link>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/swift%E5%88%A9%E7%94%A8%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E5%8A%9F%E8%83%BD/</guid>
      <description>Swift利用协议实现前缀功能 想要实现的功能 存在的问题 解决方案 属性前增加前缀（不优雅） 点语法增加前缀 一、持有属性方式 二、使用范型 给String扩充类型方法 三、利用协议实现前缀 Swift利用协议实现前缀功能 想要实现的功能 计算字符串中数字的个数
var greeting = &amp;#34;1234-Hello, playground-1234&amp;#34; extension String { var numberCount: Int { var number = 0 for c in self where (&amp;#34;0&amp;#34;...&amp;#34;9&amp;#34;).contains(c){ number += 1 } return number } } print(greeting.numberCount) 存在的问题 直接给一个类增加扩展，容易导致冲突。
解决方案 属性前增加前缀（不优雅） var greeting = &amp;#34;1234-Hello, playground-1234&amp;#34; extension String { var zy_numberCount: Int { var number = 0 for c in self where (&amp;#34;0&amp;#34;.</description>
    </item>
    
    <item>
      <title>Swift中的属性</title>
      <link>https://jiadingyi.github.io/Tips/post/swift%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jiadingyi.github.io/Tips/post/swift%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</guid>
      <description>Swift 中的属性 实例属性 存储属性 计算属性 Example 枚举 rawValue 原理 延迟存储属性（Lazy Stored Property） 属性观察器（Property Observe） 全局变量，局部变量 inout 的再次研究 类型属性 （Type Property） 类型属性细节 单例模式 协议中的属性 Swift 中的属性 实例属性 存储属性 类似成员变量的概念 存储在实例的内存中 结构体、类可以定义存储属性 ✅ 枚举不可以定义存储属性 ❎ 在创建类或结构体实例的时候，必须为所有实例属性设置一个合适的初始值 可以在初始化器里为存储属性设置一个初始值 可以分配一个默认的属性值作为属性定义的一部分 计算属性 本质就是方法（函数） 不占用实例的内存 枚举、结构体、类都可以定义计算属性 set 传入的新值默认叫做 newValue，也可以自定义 struct Circle { var radius: Double var diameter: Double { set (newDiameter) { radius = newDiameter / 2 } get { radius * 2 } } } 定义计算属性只能用 var，不能用 let let 代表常量，值是一成不变的 计算属性的值是可能发生变化的（即使是只读计算属性） 上述例子中的 radius 改变会导致 diameter 变化 只读计算属性：只有 get，没有 set struct Circle { var radius: Double var diameter: Double { radius * 2 } } Example struct Circle { // 存储属性 var radius: Double // 计算属性 var diameter: Double { set { radius = newValue / 2 } get { radius * 2 } } } var circle = Circle(radius: 5) print(circle.</description>
    </item>
    
  </channel>
</rss>
